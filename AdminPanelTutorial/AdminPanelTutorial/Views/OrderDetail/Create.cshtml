@model OrderDetailViewModel

@{
    ViewData["Title"] = "Create Order Detail";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<form asp-action="Create" method="post">
    <div class="row">
        <!-- Left Part: Product Image and Search -->
        <div class="col-md-6">
            <h5>Select Products</h5>

            <!-- Product Search -->
            <input type="text" id="productSearch" class="form-control mb-3" placeholder="Search Products" oninput="filterProducts()" />

            @if (ViewBag.Products != null && ViewBag.Products.Count > 0)
            {
                <div class="row row-cols-1 row-cols-md-3 g-3" id="productContainer">
                    @foreach (var product in ViewBag.Products as List<Product>)
                    {
                        <div class="col product-item">
                            <div class="card shadow-sm h-100" onclick="selectProduct(@product.Id, '@product.Name', @product.Price, '@product.ImageUrl')">
                                <img src="@product.ImageUrl" class="card-img-top img-fluid p-2" alt="@product.Name" style="height: 100px; object-fit: contain;">
                                <div class="card-body text-center">
                                    <h6 class="card-title text-center">@product.Name</h6>
                                    <p class="card-text text-muted">Rs. @product.Price</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No products available.</p>
            }
        </div>

        <!-- Right Part: Order Details Table -->
        <div class="col-md-6">
            <h5>Order Details</h5>
            <table class="table table-sm">
                <thead>
                    <tr>
                        
                        <th>Product Name</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Total Price</th>
                    </tr>
                </thead>
                <tbody id="orderDetailsTable">
                    <!-- Dynamically populated rows for each product -->
                </tbody>
            </table>

            <!-- Total Price Row -->
            <div class="d-flex justify-content-between">
                <strong>Total Price</strong>
                <strong>Rs. <span id="totalPrice">0.00</span></strong>
            </div>
            <div class="form-group">
                <label for="paymentMethod">Payment Method</label>
                <select id="paymentMethod" name="paymentMethod" class="form-control" required>
                    <option value="Cash">Cash</option>
                    <option value="Card">Card</option>
                    <option value="Mobile Wallet">Mobile Wallet</option>
                </select>
            </div>

            <div class="mt-3">
                <!-- Hidden input for ProductIds, Quantities, and Prices -->
                <input type="hidden" id="productIds" name="ProductIds" />
                <input type="hidden" id="quantities" name="Quantities" />
                <input type="hidden" id="prices" name="Prices" />
                <input type="hidden" id="orderId" value="@ViewBag.OrderId" /> 


                <!-- Checkout button -->
                <!-- Checkout button -->
                <button type="button" class="btn btn-success w-100" onclick="redirectToPayments()">Checkout</button>


                <!-- Create Order Detail button -->
                <button type="submit" name="action" value="Create" class="btn btn-primary w-100 mt-2">Create Order Detail</button>

                <!-- Back to List button -->
                <a asp-action="Index" class="btn btn-secondary w-100 mt-2">Back to List</a>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        let selectedProducts = [];

        // Select product and update order details table
        function selectProduct(id, name, price, imageUrl) {
            let productIndex = selectedProducts.findIndex(p => p.id === id);

            if (productIndex === -1) {
                // Add new product to the list
                selectedProducts.push({ id, name, price, quantity: 1, imageUrl });
            } else {
                // If product already exists, increase quantity
                selectedProducts[productIndex].quantity++;
            }

            updateOrderDetailsTable();
            calculateTotal();
            updateProductIds(); // Update the hidden ProductIds field
            updateQuantities(); // Update the hidden Quantities field
            updatePrices(); // Update the hidden Prices field
        }

        // Update the order details table dynamically
        function updateOrderDetailsTable() {
            let tableHtml = '';
            selectedProducts.forEach((product, index) => {
                tableHtml += `
                    <tr>
                        <td>${product.name}</td>
                        <td>${product.quantity}</td>
                        <td>Rs. ${product.price}</td>
                        <td>Rs. ${(product.price * product.quantity).toFixed(2)}</td>
                    </tr>
                `;
            });

            document.getElementById("orderDetailsTable").innerHTML = tableHtml;
        }

        //passing data to payment a

                    function redirectToPayments() {
            let totalPrice = document.getElementById("totalPrice").textContent;
            let orderId = document.getElementById("orderId").value;  // Get OrderId from hidden input
            let paymentMethod = document.getElementById("paymentMethod").value; // Get selected payment method

            let url = `/Payments/Create?OrderId=${orderId}&Amount=${totalPrice}&PaymentMethod=${encodeURIComponent(paymentMethod)}`;
            window.location.href = url;
        }



        // Calculate total price dynamically
        function calculateTotal() {
            let totalPrice = 0;
            selectedProducts.forEach(product => {
                totalPrice += product.price * product.quantity;
            });

            document.getElementById("totalPrice").textContent = totalPrice.toFixed(2);
        }

        // Filter products based on search input
        function filterProducts() {
            const searchQuery = document.getElementById("productSearch").value.toLowerCase();
            const productItems = document.querySelectorAll(".product-item");

            productItems.forEach(item => {
                const productName = item.querySelector(".card-title").textContent.toLowerCase();
                if (productName.includes(searchQuery)) {
                    item.style.display = "block";
                } else {
                    item.style.display = "none";
                }
            });
        }

        // Update the hidden ProductIds field with selected product IDs
        function updateProductIds() {
            const productIds = selectedProducts.map(product => product.id);
            document.getElementById("productIds").value = productIds.join(",");
        }

        // Update the hidden Quantities field with selected product quantities
        function updateQuantities() {
            const quantities = selectedProducts.map(product => product.quantity);
            document.getElementById("quantities").value = quantities.join(",");
        }

        // Update the hidden Prices field with selected product prices
        function updatePrices() {
            const prices = selectedProducts.map(product => product.price);
            document.getElementById("prices").value = prices.join(",");
        }
    </script>
}
